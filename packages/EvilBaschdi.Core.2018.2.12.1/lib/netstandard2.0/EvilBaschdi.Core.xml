<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EvilBaschdi.Core</name>
    </assembly>
    <members>
        <member name="T:EvilBaschdi.Core.CachedValue`1">
            <inheritdoc />
            <summary>
                Abstract class for value caching
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:EvilBaschdi.Core.CachedValue`1.NonCachedValue">
            <summary>
                Non cached value
            </summary>
        </member>
        <member name="P:EvilBaschdi.Core.CachedValue`1.Value">
            <inheritdoc />
            <summary>
                Cached value
            </summary>
        </member>
        <member name="T:EvilBaschdi.Core.Extensions.AssemblyExtensions">
            <summary>
                Extension class to display change dates of current application.
            </summary>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.AssemblyExtensions.GetLinkerTime(System.Reflection.Assembly)">
            <summary>
                Gets LinkerTime from assembly.
            </summary>
            <param name="assembly"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="assembly" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.AssemblyExtensions.GetLinkerTime(System.Reflection.Assembly,System.TimeZoneInfo)">
            <summary>
                Gets LinkerTime from assembly.
            </summary>
            <param name="assembly"></param>
            <param name="target"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="assembly" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:EvilBaschdi.Core.Extensions.ConcurrentBagExtensions">
            <summary>
                HelperClass to extend ConcurrentBag with "AddRange".
            </summary>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.ConcurrentBagExtensions.AddRange``1(System.Collections.Concurrent.ConcurrentBag{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Add Range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bag"></param>
            <param name="toAdd"></param>
        </member>
        <member name="T:EvilBaschdi.Core.Extensions.DirectoryInfoExtensions">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.DirectoryInfoExtensions.GetDirectorySize(System.IO.DirectoryInfo)">
            <summary>
                Extension to get size of a directory.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="dir" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.DirectoryInfoExtensions.GetProperDirectoryCapitalization(System.IO.DirectoryInfo)">
            <summary>
            </summary>
            <param name="dirInfo"></param>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.DirectoryInfoExtensions.RenameTo(System.IO.DirectoryInfo,System.String)">
            <summary>
                Extension to rename a directory.
            </summary>
            <param name="dir"></param>
            <param name="name"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dir" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">New name cannot be null or blank</exception>
        </member>
        <member name="T:EvilBaschdi.Core.Extensions.FileInfoExtensions">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.FileInfoExtensions.GetProperFilePathCapitalization(System.IO.FileInfo)">
            <summary>
            </summary>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.FileInfoExtensions.IsFileLocked(System.IO.FileInfo)">
            <summary>
                Returns true, if a file is locked.
            </summary>
            <param name="file">FileInfo of tile to check.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:EvilBaschdi.Core.Extensions.GenericExtensions">
            <summary>
                Class to provide generic extension methods
            </summary>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.GenericExtensions.Create``1">
            <summary>
                Returns the default instance of type T (to use it with var)
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.GenericExtensions.In``1(``0,``0[])">
            <summary>
                Extension to validate if a value is contained in a provided bunch of values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:EvilBaschdi.Core.Extensions.PathExtensions">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.PathExtensions.IsAccessible(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.PathExtensions.DirectoryInfo(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.PathExtensions.FileInfo(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.PathExtensions.GetExistingDirectories(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            </summary>
            <param name="directories"></param>
            <returns></returns>
        </member>
        <member name="T:EvilBaschdi.Core.Extensions.StringExtensions">
            <summary>
                Class to extend the functionality of the String class.
            </summary>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
                Contains <see cref="T:System.StringComparison" /> statt.
            </summary>
            <param name="source">Die Zeichenfolge in der gesucht werden soll.</param>
            <param name="value">Die zu suchende Zeichenfolge.</param>
            <param name="comparisonType">Der Modus der beim Vergleichen angewendet werden soll.</param>
            <returns>
                <c>true</c> wenn <paramref name="value" /> in <paramref name="source" /> gefunden wurde; andernfalls
                <c>false</c>
            </returns>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
                Replace with <see cref="T:System.StringComparison" />
            </summary>
            <param name="source"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.StringExtensions.SplitToEnumerable(System.String,System.String)">
            <summary>
            </summary>
            <param name="value"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.StringExtensions.RemoveRight(System.String,System.Int32)">
            <summary>
                Returns a new string in which a specified number of characters in the current instance beginning at from right have
                been deleted.
            </summary>
            <param name="value">The string to modify to this instance. </param>
            <param name="count">The number of characters to delete. </param>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.StringExtensions.RemoveLeft(System.String,System.Int32)">
            <summary>
                Returns a new string in which a specified number of characters in the current instance beginning at from left have
                been deleted.
            </summary>
            <param name="value">The string to modify to this instance. </param>
            <param name="count">The number of characters to delete. </param>
            <returns></returns>
        </member>
        <member name="T:EvilBaschdi.Core.Extensions.TimeSpanExtensions">
            <summary>
                Summary description for TimeSpanExtensions
            </summary>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.TimeSpanExtensions.Month(System.TimeSpan)">
            <summary>
                Get TimeSpan in months.
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.TimeSpanExtensions.Year(System.TimeSpan)">
            <summary>
                Get TimeSpan in years.
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.TimeSpanExtensions.Quarter(System.DateTime)">
            <summary>
                Get TimeSpan in quarters.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="T:EvilBaschdi.Core.Extensions.VersionHelper">
            <summary>
                Get if Windows Version is vista or higher.
            </summary>
        </member>
        <member name="P:EvilBaschdi.Core.Extensions.VersionHelper.IsVista">
            <summary>
                OS is Windows Vista.
            </summary>
        </member>
        <member name="P:EvilBaschdi.Core.Extensions.VersionHelper.IsWindows7">
            <summary>
                OS is Windows 7.
            </summary>
        </member>
        <member name="P:EvilBaschdi.Core.Extensions.VersionHelper.IsWindows8">
            <summary>
                OS is Windows 8 or 8.1.
            </summary>
        </member>
        <member name="P:EvilBaschdi.Core.Extensions.VersionHelper.IsWindows10">
            <summary>
                OS is Windows 10.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.Core.Extensions.VersionHelper.GetWindowsClientVersion">
            <summary>
                Gets the real OS Version.
                Application has to contain a app.manifest supporting windows 10.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EvilBaschdi.Core.ICachedValue`1">
            <inheritdoc />
            <summary>
                Interface for classes that return a cached value
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:EvilBaschdi.Core.Internal.ChainHelperFor`2">
            <inheritdoc />
        </member>
        <member name="F:EvilBaschdi.Core.Internal.ChainHelperFor`2.Input">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.Core.Internal.ChainHelperFor`2.#ctor(EvilBaschdi.Core.Internal.IChainHelperFor{`0,`1})">
            <summary>
                Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
        </member>
        <member name="P:EvilBaschdi.Core.Internal.ChainHelperFor`2.NextChain">
            <inheritdoc />
        </member>
        <member name="P:EvilBaschdi.Core.Internal.ChainHelperFor`2.AmIResponsible">
            <inheritdoc />
        </member>
        <member name="M:EvilBaschdi.Core.Internal.ChainHelperFor`2.ValueFor(`0)">
            <inheritdoc />
        </member>
        <member name="M:EvilBaschdi.Core.Internal.ChainHelperFor`2.InnerValueFor(`0)">
            <summary>
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:EvilBaschdi.Core.Internal.CopyDirectory">
            <inheritdoc />
        </member>
        <member name="M:EvilBaschdi.Core.Internal.CopyDirectory.#ctor(EvilBaschdi.Core.Internal.ICopyDirectoryWithFiles)">
            <summary>
                Constructor
            </summary>
            <param name="copyDirectoryWithFiles"></param>
        </member>
        <member name="M:EvilBaschdi.Core.Internal.CopyDirectory.RunFor(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:EvilBaschdi.Core.Internal.CopyDirectoryWithFiles">
            <inheritdoc />
        </member>
        <member name="M:EvilBaschdi.Core.Internal.CopyDirectoryWithFiles.RunFor(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="T:EvilBaschdi.Core.Internal.FileListFromPath">
            <inheritdoc />
        </member>
        <member name="M:EvilBaschdi.Core.Internal.FileListFromPath.#ctor(EvilBaschdi.Core.Internal.IMultiThreading)">
            <summary>
                Initialisiert eine neue Instanz der <see cref="T:System.Object" />-Klasse.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="multiThreading" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:EvilBaschdi.Core.Internal.FileListFromPath.GetSubdirectoriesContainingOnlyFiles(System.String)">
            <inheritdoc />
            <summary>
                Gets a list of accessible directories that contain files.
            </summary>
            <param name="path"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:EvilBaschdi.Core.Internal.FileListFromPath.ValueFor(System.String,EvilBaschdi.Core.Model.FileListFromPathFilter)">
            <inheritdoc />
        </member>
        <member name="T:EvilBaschdi.Core.Internal.IChainHelperFor`2">
            <inheritdoc />
            <summary>
            </summary>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
        </member>
        <member name="P:EvilBaschdi.Core.Internal.IChainHelperFor`2.NextChain">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.Core.Internal.IChainHelperFor`2.AmIResponsible">
            <summary>
            </summary>
        </member>
        <member name="T:EvilBaschdi.Core.Internal.ICopyDirectory">
            <inheritdoc />
        </member>
        <member name="T:EvilBaschdi.Core.Internal.ICopyDirectoryWithFiles">
            <inheritdoc />
        </member>
        <member name="T:EvilBaschdi.Core.Internal.IFileListFromPath">
            <inheritdoc />
        </member>
        <member name="M:EvilBaschdi.Core.Internal.IFileListFromPath.GetSubdirectoriesContainingOnlyFiles(System.String)">
            <summary>
                Gets a list of accessible directories that contain files.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:EvilBaschdi.Core.Internal.IMoveDirectory">
            <inheritdoc />
        </member>
        <member name="T:EvilBaschdi.Core.Internal.IMultiThreading">
            <inheritdoc />
            <summary>
                Interface to provide multi-threading execution.
                Calls actions by processor count.
            </summary>
        </member>
        <member name="T:EvilBaschdi.Core.Internal.MoveDirectory">
            <inheritdoc />
        </member>
        <member name="M:EvilBaschdi.Core.Internal.MoveDirectory.RunFor(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:EvilBaschdi.Core.Internal.MultiThreading">
            <inheritdoc />
            <summary>
                Class to provide multi threading execution.
            </summary>
        </member>
        <member name="M:EvilBaschdi.Core.Internal.MultiThreading.RunFor(System.Collections.IList,System.Action{System.Tuple{System.Int32,System.Int32}})">
            <inheritdoc />
            <summary>
                Calls actions by processor count.
            </summary>
            <param name="list"></param>
            <param name="worker"></param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="list" /> is <see langword="null" />.
                <paramref name="worker" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:EvilBaschdi.Core.IRun">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.Core.IRun.Run">
            <summary>
            </summary>
        </member>
        <member name="T:EvilBaschdi.Core.IRunFor`1">
            <summary>
            </summary>
            <typeparam name="TIn"></typeparam>
        </member>
        <member name="M:EvilBaschdi.Core.IRunFor`1.RunFor(`0)">
            <summary>
            </summary>
        </member>
        <member name="T:EvilBaschdi.Core.IRunFor2`2">
            <summary>
            </summary>
            <typeparam name="TIn1"></typeparam>
            <typeparam name="TIn2"></typeparam>
        </member>
        <member name="M:EvilBaschdi.Core.IRunFor2`2.RunFor(`0,`1)">
            <summary>
            </summary>
        </member>
        <member name="T:EvilBaschdi.Core.IRunFor3`3">
            <summary>
            </summary>
            <typeparam name="TIn1"></typeparam>
            <typeparam name="TIn2"></typeparam>
            <typeparam name="TIn3"></typeparam>
        </member>
        <member name="M:EvilBaschdi.Core.IRunFor3`3.RunFor(`0,`1,`2)">
            <summary>
            </summary>
        </member>
        <member name="T:EvilBaschdi.Core.IRunFor4`4">
            <summary>
            </summary>
            <typeparam name="TIn1"></typeparam>
            <typeparam name="TIn2"></typeparam>
            <typeparam name="TIn3"></typeparam>
            <typeparam name="TIn4"></typeparam>
        </member>
        <member name="M:EvilBaschdi.Core.IRunFor4`4.RunFor(`0,`1,`2,`3)">
            <summary>
            </summary>
        </member>
        <member name="T:EvilBaschdi.Core.IRunFor5`5">
            <summary>
            </summary>
            <typeparam name="TIn1"></typeparam>
            <typeparam name="TIn2"></typeparam>
            <typeparam name="TIn3"></typeparam>
            <typeparam name="TIn4"></typeparam>
            <typeparam name="TIn5"></typeparam>
        </member>
        <member name="M:EvilBaschdi.Core.IRunFor5`5.RunFor(`0,`1,`2,`3,`4)">
            <summary>
            </summary>
        </member>
        <member name="T:EvilBaschdi.Core.IValue`1">
            <summary>
                Generic Interface construct to encapsulate Classes without Interfaces
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:EvilBaschdi.Core.IValue`1.Value">
            <summary>Value</summary>
        </member>
        <member name="T:EvilBaschdi.Core.IValueFor`2">
            <summary>
                Generic Interface construct to encapsulate Classes without Interfaces
            </summary>
            <typeparam name="TOut"></typeparam>
            <typeparam name="TIn"></typeparam>
        </member>
        <member name="M:EvilBaschdi.Core.IValueFor`2.ValueFor(`0)">
            <summary>Value</summary>
        </member>
        <member name="T:EvilBaschdi.Core.IValueFor2`3">
            <summary>
                Generic Interface construct to encapsulate Classes without Interfaces
            </summary>
            <typeparam name="TOut"></typeparam>
            <typeparam name="TIn1"></typeparam>
            <typeparam name="TIn2"></typeparam>
        </member>
        <member name="M:EvilBaschdi.Core.IValueFor2`3.ValueFor(`0,`1)">
            <summary>Value</summary>
        </member>
        <member name="T:EvilBaschdi.Core.IValueFor3`4">
            <summary>
                Generic Interface construct to encapsulate Classes without Interfaces
            </summary>
            <typeparam name="TOut"></typeparam>
            <typeparam name="TIn1"></typeparam>
            <typeparam name="TIn2"></typeparam>
            <typeparam name="TIn3"></typeparam>
        </member>
        <member name="M:EvilBaschdi.Core.IValueFor3`4.ValueFor(`0,`1,`2)">
            <summary>Value</summary>
        </member>
        <member name="T:EvilBaschdi.Core.IValueFor4`5">
            <summary>
                Generic Interface construct to encapsulate Classes without Interfaces
            </summary>
            <typeparam name="TOut"></typeparam>
            <typeparam name="TIn1"></typeparam>
            <typeparam name="TIn2"></typeparam>
            <typeparam name="TIn3"></typeparam>
            <typeparam name="TIn4"></typeparam>
        </member>
        <member name="M:EvilBaschdi.Core.IValueFor4`5.ValueFor(`0,`1,`2,`3)">
            <summary>Value</summary>
        </member>
        <member name="T:EvilBaschdi.Core.IValueFor5`6">
            <summary>
                Generic Interface construct to encapsulate Classes without Interfaces
            </summary>
            <typeparam name="TOut"></typeparam>
            <typeparam name="TIn1"></typeparam>
            <typeparam name="TIn2"></typeparam>
            <typeparam name="TIn3"></typeparam>
            <typeparam name="TIn4"></typeparam>
            <typeparam name="TIn5"></typeparam>
        </member>
        <member name="M:EvilBaschdi.Core.IValueFor5`6.ValueFor(`0,`1,`2,`3,`4)">
            <summary>Value</summary>
        </member>
        <member name="T:EvilBaschdi.Core.Logging.AppendAllTextWithHeadline">
            <inheritdoc />
            <summary>
                Does a File.AppendAllText by adding a headline to the file.
            </summary>
        </member>
        <member name="M:EvilBaschdi.Core.Logging.AppendAllTextWithHeadline.RunFor(System.String,System.String,System.String)">
            <inheritdoc />
            <param name="path"></param>
            <param name="contents"></param>
            <param name="headline"></param>
        </member>
        <member name="M:EvilBaschdi.Core.Logging.AppendAllTextWithHeadline.RunFor(System.String,System.Text.StringBuilder,System.String)">
            <inheritdoc />
            <param name="path"></param>
            <param name="stringBuilder"></param>
            <param name="headline"></param>
        </member>
        <member name="T:EvilBaschdi.Core.Logging.IAppendAllTextWithHeadline">
            <summary>
                Does a File.AppendAllText by adding a headline to the file.
            </summary>
        </member>
        <member name="M:EvilBaschdi.Core.Logging.IAppendAllTextWithHeadline.RunFor(System.String,System.String,System.String)">
            <summary>
            </summary>
            <param name="path"></param>
            <param name="contents"></param>
            <param name="headline"></param>
        </member>
        <member name="M:EvilBaschdi.Core.Logging.IAppendAllTextWithHeadline.RunFor(System.String,System.Text.StringBuilder,System.String)">
            <summary>
            </summary>
            <param name="path"></param>
            <param name="stringBuilder"></param>
            <param name="headline"></param>
        </member>
        <member name="T:EvilBaschdi.Core.Model.FileListFromPathFilter">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.Core.Model.FileListFromPathFilter.FilterExtensionsToEqual">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.Core.Model.FileListFromPathFilter.FilterExtensionsNotToEqual">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.Core.Model.FileListFromPathFilter.FilterFileNamesToEqual">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.Core.Model.FileListFromPathFilter.FilterFileNamesNotToEqual">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.Core.Model.FileListFromPathFilter.FilterFilePathsToEqual">
            <summary>
            </summary>
        </member>
        <member name="P:EvilBaschdi.Core.Model.FileListFromPathFilter.FilterFilePathsNotToEqual">
            <summary>
            </summary>
        </member>
        <member name="T:EvilBaschdi.Core.Security.Encryption">
            <inheritdoc />
            <summary>
                encrypt and decrypt strings
            </summary>
        </member>
        <member name="M:EvilBaschdi.Core.Security.Encryption.EncryptString(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:EvilBaschdi.Core.Security.Encryption.DecryptString(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:EvilBaschdi.Core.Security.Encryption.EncryptString(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
                Encrypts the string.
            </summary>
            <param name="clearText">The clear text.</param>
            <param name="key">The key.</param>
            <param name="iv">The IV.</param>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.Core.Security.Encryption.DecryptString(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
                Decrypts the string.
            </summary>
            <param name="cipherData">The cipher data.</param>
            <param name="key">The key.</param>
            <param name="iv">The IV.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="T:EvilBaschdi.Core.Security.IEncryption">
            <summary>
            </summary>
        </member>
        <member name="M:EvilBaschdi.Core.Security.IEncryption.DecryptString(System.String,System.String)">
            <summary>
                Decrypts a string
            </summary>
            <param name="cipherText">The cipher text.</param>
            <param name="encryptionKey">The password.</param>
            <returns></returns>
        </member>
        <member name="M:EvilBaschdi.Core.Security.IEncryption.EncryptString(System.String,System.String)">
            <summary>
                Encrypts a string
            </summary>
            <param name="clearText">The clear text.</param>
            <param name="encryptionKey">The password.</param>
            <returns></returns>
        </member>
    </members>
</doc>
